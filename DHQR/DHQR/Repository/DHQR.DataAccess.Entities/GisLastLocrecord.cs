//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    public partial class GisLastLocrecord: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public decimal GisID
        {
            get { return _gisID; }
            set
            {
                if (_gisID != value)
                {
                    _gisID = value;
                    OnPropertyChanged("GisID");
                }
            }
        }
        private decimal _gisID;
    
        [DataMember]
        public string M_CODE
        {
            get { return _m_CODE; }
            set
            {
                if (_m_CODE != value)
                {
                    _m_CODE = value;
                    OnPropertyChanged("M_CODE");
                }
            }
        }
        private string _m_CODE;
    
        [DataMember]
        public string M_TYPE
        {
            get { return _m_TYPE; }
            set
            {
                if (_m_TYPE != value)
                {
                    _m_TYPE = value;
                    OnPropertyChanged("M_TYPE");
                }
            }
        }
        private string _m_TYPE;
    
        [DataMember]
        public decimal ORIGINAL_LONGITUDE
        {
            get { return _oRIGINAL_LONGITUDE; }
            set
            {
                if (_oRIGINAL_LONGITUDE != value)
                {
                    _oRIGINAL_LONGITUDE = value;
                    OnPropertyChanged("ORIGINAL_LONGITUDE");
                }
            }
        }
        private decimal _oRIGINAL_LONGITUDE;
    
        [DataMember]
        public decimal ORIGINAL_LATITUDE
        {
            get { return _oRIGINAL_LATITUDE; }
            set
            {
                if (_oRIGINAL_LATITUDE != value)
                {
                    _oRIGINAL_LATITUDE = value;
                    OnPropertyChanged("ORIGINAL_LATITUDE");
                }
            }
        }
        private decimal _oRIGINAL_LATITUDE;
    
        [DataMember]
        public Nullable<decimal> GPS_LONGITUDE
        {
            get { return _gPS_LONGITUDE; }
            set
            {
                if (_gPS_LONGITUDE != value)
                {
                    _gPS_LONGITUDE = value;
                    OnPropertyChanged("GPS_LONGITUDE");
                }
            }
        }
        private Nullable<decimal> _gPS_LONGITUDE;
    
        [DataMember]
        public Nullable<decimal> GPS_LATITUDE
        {
            get { return _gPS_LATITUDE; }
            set
            {
                if (_gPS_LATITUDE != value)
                {
                    _gPS_LATITUDE = value;
                    OnPropertyChanged("GPS_LATITUDE");
                }
            }
        }
        private Nullable<decimal> _gPS_LATITUDE;
    
        [DataMember]
        public decimal SPEED
        {
            get { return _sPEED; }
            set
            {
                if (_sPEED != value)
                {
                    _sPEED = value;
                    OnPropertyChanged("SPEED");
                }
            }
        }
        private decimal _sPEED;
    
        [DataMember]
        public decimal DIRECTION
        {
            get { return _dIRECTION; }
            set
            {
                if (_dIRECTION != value)
                {
                    _dIRECTION = value;
                    OnPropertyChanged("DIRECTION");
                }
            }
        }
        private decimal _dIRECTION;
    
        [DataMember]
        public decimal HEIGHT
        {
            get { return _hEIGHT; }
            set
            {
                if (_hEIGHT != value)
                {
                    _hEIGHT = value;
                    OnPropertyChanged("HEIGHT");
                }
            }
        }
        private decimal _hEIGHT;
    
        [DataMember]
        public int STATLLITE_NUM
        {
            get { return _sTATLLITE_NUM; }
            set
            {
                if (_sTATLLITE_NUM != value)
                {
                    _sTATLLITE_NUM = value;
                    OnPropertyChanged("STATLLITE_NUM");
                }
            }
        }
        private int _sTATLLITE_NUM;
    
        [DataMember]
        public string GPSTIME
        {
            get { return _gPSTIME; }
            set
            {
                if (_gPSTIME != value)
                {
                    _gPSTIME = value;
                    OnPropertyChanged("GPSTIME");
                }
            }
        }
        private string _gPSTIME;
    
        [DataMember]
        public string INPUTDATE
        {
            get { return _iNPUTDATE; }
            set
            {
                if (_iNPUTDATE != value)
                {
                    _iNPUTDATE = value;
                    OnPropertyChanged("INPUTDATE");
                }
            }
        }
        private string _iNPUTDATE;
    
        [DataMember]
        public string STATE
        {
            get { return _sTATE; }
            set
            {
                if (_sTATE != value)
                {
                    _sTATE = value;
                    OnPropertyChanged("STATE");
                }
            }
        }
        private string _sTATE;
    
        [DataMember]
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private System.DateTime _createTime;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
