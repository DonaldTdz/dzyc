//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(UserModuleRole))]
    [KnownType(typeof(WeiXinApp))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Nickname
        {
            get { return _nickname; }
            set
            {
                if (_nickname != value)
                {
                    _nickname = value;
                    OnPropertyChanged("Nickname");
                }
            }
        }
        private string _nickname;
    
        [DataMember]
        public string PassWord
        {
            get { return _passWord; }
            set
            {
                if (_passWord != value)
                {
                    _passWord = value;
                    OnPropertyChanged("PassWord");
                }
            }
        }
        private string _passWord;
    
        [DataMember]
        public string UpperName
        {
            get { return _upperName; }
            set
            {
                if (_upperName != value)
                {
                    _upperName = value;
                    OnPropertyChanged("UpperName");
                }
            }
        }
        private string _upperName;
    
        [DataMember]
        public int Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private int _type;
    
        [DataMember]
        public int key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    OnPropertyChanged("key");
                }
            }
        }
        private int _key;
    
        [DataMember]
        public string Tel
        {
            get { return _tel; }
            set
            {
                if (_tel != value)
                {
                    _tel = value;
                    OnPropertyChanged("Tel");
                }
            }
        }
        private string _tel;
    
        [DataMember]
        public string EMail
        {
            get { return _eMail; }
            set
            {
                if (_eMail != value)
                {
                    _eMail = value;
                    OnPropertyChanged("EMail");
                }
            }
        }
        private string _eMail;
    
        [DataMember]
        public Nullable<System.DateTime> LastLoginDate
        {
            get { return _lastLoginDate; }
            set
            {
                if (_lastLoginDate != value)
                {
                    _lastLoginDate = value;
                    OnPropertyChanged("LastLoginDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastLoginDate;
    
        [DataMember]
        public System.DateTime RegisterTime
        {
            get { return _registerTime; }
            set
            {
                if (_registerTime != value)
                {
                    _registerTime = value;
                    OnPropertyChanged("RegisterTime");
                }
            }
        }
        private System.DateTime _registerTime;
    
        [DataMember]
        public bool IsFreeze
        {
            get { return _isFreeze; }
            set
            {
                if (_isFreeze != value)
                {
                    _isFreeze = value;
                    OnPropertyChanged("IsFreeze");
                }
            }
        }
        private bool _isFreeze;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<UserModuleRole> UserModuleRoles
        {
            get
            {
                if (_userModuleRoles == null)
                {
                    _userModuleRoles = new TrackableCollection<UserModuleRole>();
                    _userModuleRoles.CollectionChanged += FixupUserModuleRoles;
                }
                return _userModuleRoles;
            }
            set
            {
                if (!ReferenceEquals(_userModuleRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_userModuleRoles != null)
                    {
                        _userModuleRoles.CollectionChanged -= FixupUserModuleRoles;
                    }
                    _userModuleRoles = value;
                    if (_userModuleRoles != null)
                    {
                        _userModuleRoles.CollectionChanged += FixupUserModuleRoles;
                    }
                    OnNavigationPropertyChanged("UserModuleRoles");
                }
            }
        }
        private TrackableCollection<UserModuleRole> _userModuleRoles;
    
        [DataMember]
        public TrackableCollection<WeiXinApp> WeiXinApps
        {
            get
            {
                if (_weiXinApps == null)
                {
                    _weiXinApps = new TrackableCollection<WeiXinApp>();
                    _weiXinApps.CollectionChanged += FixupWeiXinApps;
                }
                return _weiXinApps;
            }
            set
            {
                if (!ReferenceEquals(_weiXinApps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_weiXinApps != null)
                    {
                        _weiXinApps.CollectionChanged -= FixupWeiXinApps;
                    }
                    _weiXinApps = value;
                    if (_weiXinApps != null)
                    {
                        _weiXinApps.CollectionChanged += FixupWeiXinApps;
                    }
                    OnNavigationPropertyChanged("WeiXinApps");
                }
            }
        }
        private TrackableCollection<WeiXinApp> _weiXinApps;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            UserModuleRoles.Clear();
            WeiXinApps.Clear();
        }

        #endregion

        #region 关联修复
    
        private void FixupUserModuleRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserModuleRole item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserModuleRoles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserModuleRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserModuleRoles", item);
                    }
                }
            }
        }
    
        private void FixupWeiXinApps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WeiXinApp item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WeiXinApps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WeiXinApp item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WeiXinApps", item);
                    }
                }
            }
        }

        #endregion

    }
}
