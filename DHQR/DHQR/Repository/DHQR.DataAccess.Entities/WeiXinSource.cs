//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WeiXinPicMsgMatser))]
    [KnownType(typeof(WeiXinApp))]
    public partial class WeiXinSource: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public System.Guid WeiXinAppId
        {
            get { return _weiXinAppId; }
            set
            {
                if (_weiXinAppId != value)
                {
                    ChangeTracker.RecordOriginalValue("WeiXinAppId", _weiXinAppId);
                    if (!IsDeserializing)
                    {
                        if (WeiXinApp != null && WeiXinApp.Id != value)
                        {
                            WeiXinApp = null;
                        }
                    }
                    _weiXinAppId = value;
                    OnPropertyChanged("WeiXinAppId");
                }
            }
        }
        private System.Guid _weiXinAppId;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<WeiXinPicMsgMatser> WeiXinPicMsgMatsers
        {
            get
            {
                if (_weiXinPicMsgMatsers == null)
                {
                    _weiXinPicMsgMatsers = new TrackableCollection<WeiXinPicMsgMatser>();
                    _weiXinPicMsgMatsers.CollectionChanged += FixupWeiXinPicMsgMatsers;
                }
                return _weiXinPicMsgMatsers;
            }
            set
            {
                if (!ReferenceEquals(_weiXinPicMsgMatsers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_weiXinPicMsgMatsers != null)
                    {
                        _weiXinPicMsgMatsers.CollectionChanged -= FixupWeiXinPicMsgMatsers;
                    }
                    _weiXinPicMsgMatsers = value;
                    if (_weiXinPicMsgMatsers != null)
                    {
                        _weiXinPicMsgMatsers.CollectionChanged += FixupWeiXinPicMsgMatsers;
                    }
                    OnNavigationPropertyChanged("WeiXinPicMsgMatsers");
                }
            }
        }
        private TrackableCollection<WeiXinPicMsgMatser> _weiXinPicMsgMatsers;
    
        [DataMember]
        public WeiXinApp WeiXinApp
        {
            get { return _weiXinApp; }
            set
            {
                if (!ReferenceEquals(_weiXinApp, value))
                {
                    var previousValue = _weiXinApp;
                    _weiXinApp = value;
                    FixupWeiXinApp(previousValue);
                    OnNavigationPropertyChanged("WeiXinApp");
                }
            }
        }
        private WeiXinApp _weiXinApp;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WeiXinPicMsgMatsers.Clear();
            WeiXinApp = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupWeiXinApp(WeiXinApp previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WeiXinSources.Contains(this))
            {
                previousValue.WeiXinSources.Remove(this);
            }
    
            if (WeiXinApp != null)
            {
                if (!WeiXinApp.WeiXinSources.Contains(this))
                {
                    WeiXinApp.WeiXinSources.Add(this);
                }
    
                WeiXinAppId = WeiXinApp.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WeiXinApp")
                    && (ChangeTracker.OriginalValues["WeiXinApp"] == WeiXinApp))
                {
                    ChangeTracker.OriginalValues.Remove("WeiXinApp");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WeiXinApp", previousValue);
                }
                if (WeiXinApp != null && !WeiXinApp.ChangeTracker.ChangeTrackingEnabled)
                {
                    WeiXinApp.StartTracking();
                }
            }
        }
    
        private void FixupWeiXinPicMsgMatsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WeiXinPicMsgMatser item in e.NewItems)
                {
                    item.WeiXinSource = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WeiXinPicMsgMatsers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WeiXinPicMsgMatser item in e.OldItems)
                {
                    if (ReferenceEquals(item.WeiXinSource, this))
                    {
                        item.WeiXinSource = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WeiXinPicMsgMatsers", item);
                    }
                }
            }
        }

        #endregion

    }
}
