//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ModuleRole))]
    [KnownType(typeof(Module))]
    public partial class ModuleRoleToModule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public System.Guid ModuleRoleId
        {
            get { return _moduleRoleId; }
            set
            {
                if (_moduleRoleId != value)
                {
                    ChangeTracker.RecordOriginalValue("ModuleRoleId", _moduleRoleId);
                    if (!IsDeserializing)
                    {
                        if (ModuleRole != null && ModuleRole.Id != value)
                        {
                            ModuleRole = null;
                        }
                    }
                    _moduleRoleId = value;
                    OnPropertyChanged("ModuleRoleId");
                }
            }
        }
        private System.Guid _moduleRoleId;
    
        [DataMember]
        public System.Guid ModuleId
        {
            get { return _moduleId; }
            set
            {
                if (_moduleId != value)
                {
                    ChangeTracker.RecordOriginalValue("ModuleId", _moduleId);
                    if (!IsDeserializing)
                    {
                        if (Module != null && Module.Id != value)
                        {
                            Module = null;
                        }
                    }
                    _moduleId = value;
                    OnPropertyChanged("ModuleId");
                }
            }
        }
        private System.Guid _moduleId;

        #endregion

        #region 导航属性
    
        [DataMember]
        public ModuleRole ModuleRole
        {
            get { return _moduleRole; }
            set
            {
                if (!ReferenceEquals(_moduleRole, value))
                {
                    var previousValue = _moduleRole;
                    _moduleRole = value;
                    FixupModuleRole(previousValue);
                    OnNavigationPropertyChanged("ModuleRole");
                }
            }
        }
        private ModuleRole _moduleRole;
    
        [DataMember]
        public Module Module
        {
            get { return _module; }
            set
            {
                if (!ReferenceEquals(_module, value))
                {
                    var previousValue = _module;
                    _module = value;
                    FixupModule(previousValue);
                    OnNavigationPropertyChanged("Module");
                }
            }
        }
        private Module _module;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ModuleRole = null;
            Module = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupModuleRole(ModuleRole previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ModuleRoleToModules.Contains(this))
            {
                previousValue.ModuleRoleToModules.Remove(this);
            }
    
            if (ModuleRole != null)
            {
                if (!ModuleRole.ModuleRoleToModules.Contains(this))
                {
                    ModuleRole.ModuleRoleToModules.Add(this);
                }
    
                ModuleRoleId = ModuleRole.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ModuleRole")
                    && (ChangeTracker.OriginalValues["ModuleRole"] == ModuleRole))
                {
                    ChangeTracker.OriginalValues.Remove("ModuleRole");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ModuleRole", previousValue);
                }
                if (ModuleRole != null && !ModuleRole.ChangeTracker.ChangeTrackingEnabled)
                {
                    ModuleRole.StartTracking();
                }
            }
        }
    
        private void FixupModule(Module previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ModuleRoleToModules.Contains(this))
            {
                previousValue.ModuleRoleToModules.Remove(this);
            }
    
            if (Module != null)
            {
                if (!Module.ModuleRoleToModules.Contains(this))
                {
                    Module.ModuleRoleToModules.Add(this);
                }
    
                ModuleId = Module.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Module")
                    && (ChangeTracker.OriginalValues["Module"] == Module))
                {
                    ChangeTracker.OriginalValues.Remove("Module");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Module", previousValue);
                }
                if (Module != null && !Module.ChangeTracker.ChangeTrackingEnabled)
                {
                    Module.StartTracking();
                }
            }
        }

        #endregion

    }
}
