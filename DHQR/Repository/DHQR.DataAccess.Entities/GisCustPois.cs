//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    public partial class GisCustPois: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public string CUST_ID
        {
            get { return _cUST_ID; }
            set
            {
                if (_cUST_ID != value)
                {
                    _cUST_ID = value;
                    OnPropertyChanged("CUST_ID");
                }
            }
        }
        private string _cUST_ID;
    
        [DataMember]
        public string MOBILE_TYPE
        {
            get { return _mOBILE_TYPE; }
            set
            {
                if (_mOBILE_TYPE != value)
                {
                    _mOBILE_TYPE = value;
                    OnPropertyChanged("MOBILE_TYPE");
                }
            }
        }
        private string _mOBILE_TYPE;
    
        [DataMember]
        public Nullable<decimal> ORIGINAL_LONGITUDE
        {
            get { return _oRIGINAL_LONGITUDE; }
            set
            {
                if (_oRIGINAL_LONGITUDE != value)
                {
                    _oRIGINAL_LONGITUDE = value;
                    OnPropertyChanged("ORIGINAL_LONGITUDE");
                }
            }
        }
        private Nullable<decimal> _oRIGINAL_LONGITUDE;
    
        [DataMember]
        public Nullable<decimal> ORIGINAL_LATITUDE
        {
            get { return _oRIGINAL_LATITUDE; }
            set
            {
                if (_oRIGINAL_LATITUDE != value)
                {
                    _oRIGINAL_LATITUDE = value;
                    OnPropertyChanged("ORIGINAL_LATITUDE");
                }
            }
        }
        private Nullable<decimal> _oRIGINAL_LATITUDE;
    
        [DataMember]
        public string IS_DEFAULT
        {
            get { return _iS_DEFAULT; }
            set
            {
                if (_iS_DEFAULT != value)
                {
                    _iS_DEFAULT = value;
                    OnPropertyChanged("IS_DEFAULT");
                }
            }
        }
        private string _iS_DEFAULT;
    
        [DataMember]
        public string CRT_TIME
        {
            get { return _cRT_TIME; }
            set
            {
                if (_cRT_TIME != value)
                {
                    _cRT_TIME = value;
                    OnPropertyChanged("CRT_TIME");
                }
            }
        }
        private string _cRT_TIME;
    
        [DataMember]
        public string CRT_USER_ID
        {
            get { return _cRT_USER_ID; }
            set
            {
                if (_cRT_USER_ID != value)
                {
                    _cRT_USER_ID = value;
                    OnPropertyChanged("CRT_USER_ID");
                }
            }
        }
        private string _cRT_USER_ID;
    
        [DataMember]
        public string COL_TIME
        {
            get { return _cOL_TIME; }
            set
            {
                if (_cOL_TIME != value)
                {
                    _cOL_TIME = value;
                    OnPropertyChanged("COL_TIME");
                }
            }
        }
        private string _cOL_TIME;
    
        [DataMember]
        public string IMP_STATUS
        {
            get { return _iMP_STATUS; }
            set
            {
                if (_iMP_STATUS != value)
                {
                    _iMP_STATUS = value;
                    OnPropertyChanged("IMP_STATUS");
                }
            }
        }
        private string _iMP_STATUS;
    
        [DataMember]
        public string NOTE
        {
            get { return _nOTE; }
            set
            {
                if (_nOTE != value)
                {
                    _nOTE = value;
                    OnPropertyChanged("NOTE");
                }
            }
        }
        private string _nOTE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
