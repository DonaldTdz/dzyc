//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DHQR.DataAccess.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WeiXinSource))]
    [KnownType(typeof(WeiXinApp))]
    public partial class WeiXinPicMsgMatser: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string PicUrl
        {
            get { return _picUrl; }
            set
            {
                if (_picUrl != value)
                {
                    _picUrl = value;
                    OnPropertyChanged("PicUrl");
                }
            }
        }
        private string _picUrl;
    
        [DataMember]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.Guid WeiXinSourceId
        {
            get { return _weiXinSourceId; }
            set
            {
                if (_weiXinSourceId != value)
                {
                    ChangeTracker.RecordOriginalValue("WeiXinSourceId", _weiXinSourceId);
                    if (!IsDeserializing)
                    {
                        if (WeiXinSource != null && WeiXinSource.Id != value)
                        {
                            WeiXinSource = null;
                        }
                    }
                    _weiXinSourceId = value;
                    OnPropertyChanged("WeiXinSourceId");
                }
            }
        }
        private System.Guid _weiXinSourceId;
    
        [DataMember]
        public System.Guid WeiXinAppId
        {
            get { return _weiXinAppId; }
            set
            {
                if (_weiXinAppId != value)
                {
                    ChangeTracker.RecordOriginalValue("WeiXinAppId", _weiXinAppId);
                    if (!IsDeserializing)
                    {
                        if (WeiXinApp != null && WeiXinApp.Id != value)
                        {
                            WeiXinApp = null;
                        }
                    }
                    _weiXinAppId = value;
                    OnPropertyChanged("WeiXinAppId");
                }
            }
        }
        private System.Guid _weiXinAppId;
    
        [DataMember]
        public int MaterialType
        {
            get { return _materialType; }
            set
            {
                if (_materialType != value)
                {
                    _materialType = value;
                    OnPropertyChanged("MaterialType");
                }
            }
        }
        private int _materialType;
    
        [DataMember]
        public bool NeedParam
        {
            get { return _needParam; }
            set
            {
                if (_needParam != value)
                {
                    _needParam = value;
                    OnPropertyChanged("NeedParam");
                }
            }
        }
        private bool _needParam;
    
        [DataMember]
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private System.DateTime _createTime;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;

        #endregion

        #region 导航属性
    
        [DataMember]
        public WeiXinSource WeiXinSource
        {
            get { return _weiXinSource; }
            set
            {
                if (!ReferenceEquals(_weiXinSource, value))
                {
                    var previousValue = _weiXinSource;
                    _weiXinSource = value;
                    FixupWeiXinSource(previousValue);
                    OnNavigationPropertyChanged("WeiXinSource");
                }
            }
        }
        private WeiXinSource _weiXinSource;
    
        [DataMember]
        public WeiXinApp WeiXinApp
        {
            get { return _weiXinApp; }
            set
            {
                if (!ReferenceEquals(_weiXinApp, value))
                {
                    var previousValue = _weiXinApp;
                    _weiXinApp = value;
                    FixupWeiXinApp(previousValue);
                    OnNavigationPropertyChanged("WeiXinApp");
                }
            }
        }
        private WeiXinApp _weiXinApp;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WeiXinSource = null;
            WeiXinApp = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupWeiXinSource(WeiXinSource previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WeiXinPicMsgMatsers.Contains(this))
            {
                previousValue.WeiXinPicMsgMatsers.Remove(this);
            }
    
            if (WeiXinSource != null)
            {
                if (!WeiXinSource.WeiXinPicMsgMatsers.Contains(this))
                {
                    WeiXinSource.WeiXinPicMsgMatsers.Add(this);
                }
    
                WeiXinSourceId = WeiXinSource.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WeiXinSource")
                    && (ChangeTracker.OriginalValues["WeiXinSource"] == WeiXinSource))
                {
                    ChangeTracker.OriginalValues.Remove("WeiXinSource");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WeiXinSource", previousValue);
                }
                if (WeiXinSource != null && !WeiXinSource.ChangeTracker.ChangeTrackingEnabled)
                {
                    WeiXinSource.StartTracking();
                }
            }
        }
    
        private void FixupWeiXinApp(WeiXinApp previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WeiXinPicMsgMatsers.Contains(this))
            {
                previousValue.WeiXinPicMsgMatsers.Remove(this);
            }
    
            if (WeiXinApp != null)
            {
                if (!WeiXinApp.WeiXinPicMsgMatsers.Contains(this))
                {
                    WeiXinApp.WeiXinPicMsgMatsers.Add(this);
                }
    
                WeiXinAppId = WeiXinApp.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WeiXinApp")
                    && (ChangeTracker.OriginalValues["WeiXinApp"] == WeiXinApp))
                {
                    ChangeTracker.OriginalValues.Remove("WeiXinApp");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WeiXinApp", previousValue);
                }
                if (WeiXinApp != null && !WeiXinApp.ChangeTracker.ChangeTrackingEnabled)
                {
                    WeiXinApp.StartTracking();
                }
            }
        }

        #endregion

    }
}
